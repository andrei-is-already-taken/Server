// Generated by CoffeeScript 1.10.0
(function() {
  var Model, Promise, allPostsInformation, elastic;

  elastic = require('../libs/elastic');

  Model = require('../models/model.js').Model;

  allPostsInformation = require('./rating').allPostsInformation;

  Promise = require('bluebird');

  exports.get = function(req, res) {
    var commentPosts, creativePosts, tagPosts, userPosts;
    tagPosts = elastic.getSuggestions('tag', req.params.input).then(function(result) {
      var afterElastic;
      afterElastic = [];
      if (result.docsuggest) {
        afterElastic = result.docsuggest[0].options;
      }
      return Promise.all(afterElastic.map(function(tag) {
        return Model.Tag.findOne({
          where: {
            name: tag.text
          }
        }).then(function(tag) {
          return tag.getCreatives();
        });
      }));
    });
    userPosts = elastic.getSuggestions('user', req.params.input).then(function(result) {
      var afterElastic;
      afterElastic = [];
      if (result.docsuggest) {
        afterElastic = result.docsuggest[0].options;
      }
      return Promise.all(afterElastic.map(function(userObj) {
        return Model.User.findOne({
          where: {
            authId: userObj.text
          }
        }).then(function(user) {
          return user.getCreatives();
        });
      }));
    });
    commentPosts = elastic.getSuggestions('comment', req.params.input).then(function(result) {
      var afterElastic;
      afterElastic = [];
      if (result.docsuggest) {
        afterElastic = result.docsuggest[0].options;
      }
      return Promise.all(afterElastic.map(function(commentObj) {
        return Model.Comment.findOne({
          where: {
            body: commentObj.text
          }
        }).then(function(comment) {
          return Model.Creative.findOne({
            where: {
              id: comment.creativeId
            }
          }).then(function(post) {
            return post;
          });
        });
      }));
    });
    creativePosts = elastic.getSuggestions('creative', req.params.input).then(function(result) {
      var afterElastic;
      afterElastic = [];
      if (result.docsuggest) {
        afterElastic = result.docsuggest[0].options;
      }
      return Promise.all(afterElastic.map(function(creativeObj) {
        return Model.Creative.findOne({
          where: {
            title: creativeObj.text
          }
        }).then(function(creative) {
          return creative;
        });
      }));
    });
    Promise.all([tagPosts, userPosts, creativePosts, commentPosts]).then(function(posts) {
      var result, temp;
      temp = [].concat.apply([], posts);
      result = [].concat.apply([], temp);
      result = result.unique();
      allPostsInformation(result).then((function(posts) {
        res.send(posts);
      }), function(err) {
        res.sendStatus(402);
      });
    });
  };

  Array.prototype.unique = function() {
    var i, l, o, r;
    o = {};
    i = void 0;
    l = this.length;
    r = [];
    i = 0;
    while (i < l) {
      o[this[i].id] = this[i];
      i += 1;
    }
    for (i in o) {
      r.push(o[i]);
    }
    return r;
  };

}).call(this);

//# sourceMappingURL=search.js.map
