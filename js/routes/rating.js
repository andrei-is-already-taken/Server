// Generated by CoffeeScript 1.10.0
(function() {
  var Model, Promise, allPostsInformation;

  Model = require('../models/model.js').Model;

  Promise = require('bluebird');

  allPostsInformation = function(creatives, user) {
    var currentUser, ratings;
    ratings = Promise.all(creatives.map(function(creative) {
      return creative.getCreativeRatings();
    }));
    currentUser = Model.User.find({
      where: {
        authId: user
      }
    });
    return Promise.all([creatives, ratings]).spread(Model.AddScores).then(Model.AddUsers).then(function(creatives) {
      return creatives.sort().reverse().slice(0, 50);
    }).then(Model.AddTags).then(function(creatives) {
      return [creatives, currentUser];
    }).spread(function(creatives, currentUser) {
      return Model.AddRatables(creatives, currentUser);
    });
  };

  exports.getRatedCreatives = function(req, res) {
    var ratedPosts;
    ratedPosts = Model.Creative.findAll({}).then(function(creatives) {
      return allPostsInformation(creatives, req.session.user);
    });
    ratedPosts.then((function(posts) {
      console.log(posts);
      res.send(posts);
    }), function(err) {
      res.sendStatus(402);
    });
  };

  exports.allPostsInformation = allPostsInformation;

  exports.rateCreative = function(req, res) {
    var creativeRatings, currentCreative, currentUser, id, score, sum, userRatings;
    score = req.body.score;
    id = req.body.id;
    sum = 0;
    currentUser = Model.User.findOne({
      where: {
        authId: req.session.user
      }
    });
    currentCreative = Model.Creative.findById(id);
    creativeRatings = currentCreative.then(function(creative) {
      return creative.getCreativeRatings();
    });
    userRatings = currentUser.then(function(user) {
      return user.getCreativeRatings();
    });
    Promise.all([creativeRatings, userRatings, currentUser]).spread(function(creativeRatings, userRatings, user) {
      var alreadyRated;
      creativeRatings.forEach(function(rating) {
        sum += rating.score;
      });
      alreadyRated = creativeRatings.some(function(creativeRating) {
        return creativeRating.userId === user.id;
      });
      if (alreadyRated) {
        res.sendStatus(403);
      } else {
        return [
          Model.CreativeRating.create({
            score: score
          }), currentUser, currentCreative
        ];
      }
    }).spread(function(creativeRating, user, creative) {
      return [user.addCreativeRating(creativeRating), creative.addCreativeRating(creativeRating)];
    }).then(function() {
      res.send({
        score: sum + score
      });
    });
  };

}).call(this);

//# sourceMappingURL=rating.js.map
